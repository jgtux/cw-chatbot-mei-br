# -*- coding: utf-8 -*-
"""Chat_bot_menu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gALxumjsb5g0L1Kwg6IDZ1_qbyRGoIQs
"""

#BIBLIOTECAS

#import pymongo
#import networkx
import requests 


access_token = None

#MENU E INTERAÇÂO COM USUARIO

#menu inicial
def menu_inicial():
  print("\t1-ENTRAR")
  print("\t2-CADASTRAR")
  op=(input("DIGITE A OPÇÃO DESEJADA: "))
  if(op!="1" and op!="2"):
    print("OPÇÃO INVÁLIDA")
    menu_inicial()
  else:
    if (op=="1"):
      login()
    else:
      cadastro()
  return op

def login():
  global access_token
  usuario=input("\nDIGITE O USUÁRIO: ")
  senha=input("\nDIGITE A SENHA: ")
  url = "http:/localhost:5000/auth/login"
  body = {
    "nome": usuario,
    "senha": senha
  }
  try:
        response = requests.post(url, json=payload)
        response.raise_for_status()  

        data = response.json()
        access_token = data.get("access_token")

        if access_token:
            print("\nLogin realizado com sucesso!")
            menu_principal()
        else:
            print("\nLogin falhou: token não encontrado na resposta.")

  except requests.exceptions.RequestException as e:
        print(f"\n Erro ao fazer login: {e}")

  menu_principal()

def cadastro():
  usuario=input("\nDIGITE O USUÁRIO: ")
  email=input("\nDIGITE O EMAIL: ")
  senha=input("\nDIGITE A SENHA: ")
  url = "http:/localhost:5000/auth/cadastrar"
  body = {
    "nome": usuario,
    "email": email,
    "senha": senha
  }
  try:
        response = requests.post(url, json=payload)
        
        if response.status_code == 201:
            print("\nCadastro realizado com sucesso!")
            menu_principal()
        else:
            print(f"\nErro no cadastro ({response.status_code}): {response.text}")

  except requests.exceptions.RequestException as e:
        print(f"\nErro ao fazer cadastro: {e}")
  menu_principal()

def menu_principal():
  print("\t1-CONTA")
  print("\t2-CHATBOT")
  print("\t3-HISTÓRICO")
  print("\t4-SAIR")
  op=(input("\nDIGITE A OPÇÃO DESEJADA: "))
  if(op!="1" and op!="2" and op!="3" and op!="4"):
    print("OPÇÃO INVÁLIDA")
    menu_principal()
  else:
    if (op=="1"):
      print("CONTA")
      conf_conta()
    elif(op=="2"):
      print("CHATBOT")
      chatbot()
    elif(op=="3"):
      print("HISTÓRICO")
      historico()
    else:
      print("SAIR")
      menu_inicial()
  return op

def conf_conta():
  print("\t1-INFORMAÇÔES DA CONTA") #mostra os dados
  print("\t2-ALTERAR DADOS") #update dos dados
  print("\t3-EXCLUIR CONTA") #delete
  print("\t4-VOLTAR") #volta para o menu principal
  op=(input("\nDIGITE A OPÇÃO DESEJADA: "))


def chatbot():
  print("CHATBOT")
  #o chatbot parace que consiste de um while com o langchain mandando a pergunta e um print em baixo para imprimir a resposta

  #exem chatbot do chatGPT (ele usa o modelo da OpenIA -_-)

  #CONFIGURAÇÃO
  # from langchain.llms import OpenAI
  # from langchain.chains import ConversationChain
  # from langchain.memory import ConversationBufferMemory

  # llm = OpenAI(temperature=0.7)
  # memory = ConversationBufferMemory()
  # chat_chain = ConversationChain(llm=llm, memory=memory)

  #LOOP CONVERSA
  # def iniciar_conversa(user_id):
  #   while True:
  #       pergunta = input("Você: ")
  #       if pergunta.lower() in ["sair", "encerrar"]:
  #           break
  #       resposta = chat_chain.run(pergunta)
  #       print("Bot:", resposta)
  #       conversas.insert_one({"user_id": user_id, "pergunta": pergunta, "resposta": resposta}) (salva a conversa no banco de dados)


def historico():
  print("HISTÓRICO")
  # grafo com o histórico de conversas


#EXECUÇÃO (MAIN)

def main ():
  #conectar_db()
  menu_inicial()

main()
