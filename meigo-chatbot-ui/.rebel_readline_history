1742586680585::cljs/quit
1742837736187:(auth/auth-form)
1742837756930:(auth-form)
1742837772877:(modal/modal-panel)
1742837811136:(auth/auth-form)
1742837830599::cljs/quit
1748865426541::cljs:quit
1748865430225::cljs/quit
1748888079506::cljs/quit 1
1748888162178:i
1748888164322:l
1748888167847::cljs/quit
1748888804446:(auth/auth-form)
1748888819401::cljs/quit
1748891216054:i
1748891219688::cljs/quit
1748912733159::cljs/quit 1
1748915031891::cljs/quit 1 21 1Warning: Updating a style property during rerender (paddingLeft) when a conflicting property is set (padding) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values. Component Stack:
1748957789699::cljs/quit 1 2 1
1748958061508:V
1748958064224::cljs/quit
1748959652622::cljs/quit1 1
1748966411033:;; (defn group-by-date [messages]
1748966411065:;;   (->> messages
1748966411124:;;        (group-by #(subs (:data %) 0 10)) ;; "YYYY-MM-DD"
1748966411181:;;        (sort-by first >))) ;; sort descending by date
1748966412837:(defn group-by-date [messages]\n    (->> messages\n                (filter #(and (contains? % :data) (string? (:data %))))\n                (group-by #(subs (:data %) 0 10)) ;; "YYYY-MM-DD"\n                (sort-by first >))) ;; sort descending by date
1748975044778::cljs/quit
1748976143935:ðŸ˜Š
1748978912006:i, :target Como assim nao?}} {:data {:source Como assim nao?, :target Desculpe, nÃ£o entendi sua pergunta!  ðŸ¤”\n\n                                     5~
1748983463145::cljs/quit
1748983744243:i, :target Como assim nao?}} {:data {:source Como assim nao?, :target Desculpe, nÃ£o entendi sua pergunta!  ðŸ¤”\n\n                                      ~(ns meigo-chatbot.graphs\n                                          :require [reagent.core :as r]\n                                          meigo-chatbot.auth :refer [authed-request]]\n meigo-chatbot.config :as conf]\n            [cljs.core.async :refer [go <!]]))
1748983744778:(defonce graph-data (r/atom nil))
1748983749650:(defn fetch-graph []\n    (go\n          (let [resp (<! (authed-request :get (str conf/api-url "/chat/grafos") {}))]\n                  (when resp\n                            (let [data (js->clj resp :keywordize-keys true)]\n                                        (println "Raw API response:" resp)\n                                        (println "Converted data:" data)\n                                        (println "Data keys:" (keys data))\n                                        (reset! graph-data data))))))
1748983849954:(defn init-cytoscape [container elements-data]\n    (try\n          (when (and container elements-data (exists? js/cytoscape))\n                  ;; Clear container\n                  (set! (.-innerHTML container) "")\n                  \n                  ;; Convert to JS and validate\n                  (let [elements-js (clj->js elements-data)]\n                            (println "Converting elements:" elements-data)\n                            (js/console.log "Elements JS:" elements-js)\n                            \n                            ;; Double-check elements-js is not null/undefined\n                            (when (and elements-js (not (undefined? elements-js)))\n                                        (js/cytoscape\n                                                     #js {:container container\n                                                                           :elements elements-js\n                                                                           :style #js [#js {"selector" "node"\n                                                                                                                              "style" #js {"label" "data(id)"\n                                                                                                                                                                                          "background-color" "#61bffc"\n                                                                                                                                                                                          "text-valign" "center"\n                                                                                                                                                                                          "text-halign" "center"}}\n                                                                                                                    #js {"selector" "edge"\n                                                                                                                                                           "style" #js {"width" 2\n                                                                                                                                                                                                                       "line-color" "#ccc"\n                                                                                                                                                                                                                       "target-arrow-color" "#ccc"\n                                                                                                                                                                                                                       "target-arrow-shape" "triangle"}}]\n                                                                           :layout #js {:name "cose"\n                                                                                                                      :animate true\n                                                                                                                      :randomize false}}))))\n          (catch :default e\n                  (js/console.error "Cytoscape init error:" e)\n                  (js/console.error "Container:" container)\n                  (js/console.error "Elements data:" elements-data))))
1748983850123:;; Separate component that only renders when data is ready
1748983873962:(defn cytoscape-graph [nodes edges]\n    (r/create-class\n         {:component-did-mount\n               (fn [_]\n                        (when-let [container (js/document.getElementById "cy")]\n                                   (let [elements (concat nodes edges)]\n                                                (println "Initializing Cytoscape with" (count nodes) "nodes and" (count edges) "edges")\n                                                (js/setTimeout #(init-cytoscape container elements) 200))))\n               \n               :component-did-update\n               (fn [this [_ old-nodes old-edges]]\n                        (when-let [container (js/document.getElementById "cy")]\n                                   (let [elements (concat nodes edges)]\n                                                (when (or (not= nodes old-nodes) (not= edges old-edges))\n                                                               (println "Updating Cytoscape")\n                                                               (js/setTimeout #(init-cytoscape container elements) 100)))))\n               \n               :reagent-render\n               (fn [nodes edges]\n                        [:div {:id "cy" :style {:width "100%" :height "600px" :border "1px solid #ccc"}}])}))
1748983875495:(defn validate-node [node]\n    (and (map? node)\n                (contains? node :data)\n                (map? (:data node))\n                (contains? (:data node) :id)))
1748983878126:(defn validate-edge [edge]\n    (and (map? edge)\n                (contains? edge :data)\n                (map? (:data edge))\n                (contains? (:data edge) :source)\n                (contains? (:data edge) :target)))
1748983888690:(defn valid-graph-data? [data]\n    (try\n          (and data\n                        (map? data)\n                        (contains? data :elementos)\n                        (let [{:keys [nodes edges]} (:elementos data)]\n                                     (and (sequential? nodes)\n                                                          (sequential? edges)\n                                                          (seq nodes)\n                                                          (seq edges)\n                                                          (every? validate-node nodes)\n                                                          (every? validate-edge edges))))\n          (catch :default e\n                  (js/console.error "Validation error:" e)\n                  false)))
1748983931715:(defn debug-data-structure [data]\n    [:div\n        [:h4 "Debug Information"]\n        [:p "Data type: " (str (type data))]\n        [:p "Data keys: " (str (keys data))]\n        (when (contains? data :elementos)\n               [:div\n                      [:p "Elementos keys: " (str (keys (:elementos data)))]\n                      (let [{:keys [nodes edges]} (:elementos data)]\n                                [:div\n                                          [:p "Nodes count: " (str (count nodes))]\n                                          [:p "Edges count: " (str (count edges))]\n                                          (when (seq nodes)\n                                                       [:div\n                                                                    [:p "First node: " (str (first nodes))]\n                                                                    [:p "Node valid? " (str (validate-node (first nodes)))]])\n                                          (when (seq edges)\n                                                       [:div\n                                                                    [:p "First edge: " (str (first edges))]\n                                                                    [:p "Edge valid? " (str (validate-edge (first edges)))]])])])\n        [:details\n             [:summary "Full data"]\n             [:pre {:style {:font-size "10px" :max-height "200px" :overflow "auto"}}\n                   (with-out-str (cljs.pprint/pprint data))]]])
1748983991766:(defn history-graphs-panel []\n    (r/create-class\n         {:component-did-mount\n               (fn [] \n                        (println "Component mounted, fetching graph data...")\n                        (fetch-graph))\n               \n               :reagent-render\n               (fn []\n                        [:div\n                                 [:h2 "Historical Graph"]\n                                 (let [data @graph-data]\n                                             (cond\n                                                           (nil? data)\n                                                           [:p "Loading graph data..."]\n                                                           \n                                                           (not (valid-graph-data? data))\n                                                           [:div\n                                                                         [:p {:style {:color "red"}} "Invalid or incomplete graph data received"]\n                                                                         [debug-data-structure data]]\n                                                           \n                                                           (and (valid-graph-data? data) (empty? (:nodes (:elementos data))))\n                                                           ;; Show message when no nodes are available\n                                                           [:div\n                                                                         [:p {:style {:color "orange"}} "No nodes to display. The graph is empty."]]\n                                                           \n                                                           :else\n                                                           (let [{:keys [nodes edges]} (:elementos data)]\n                                                                           [:div\n                                                                                           [:p {:style {:color "green"}} \n                                                                                                            (str "Graph loaded: " (count nodes) " nodes, " (count edges) " edges")]\n                                                                                           [cytoscape-graph nodes edges]])))])}))
1748983991973:;; Alternative minimal test component to verify Cytoscape works
1748984010437:(defn test-cytoscape []\n    (r/create-class\n         {:component-did-mount\n               (fn [_]\n                        (when-let [container (js/document.getElementById "test-cy")]\n                                   (let [test-elements [{"data" {"id" "a"}}\n                                                                                      {"data" {"id" "b"}}  \n                                                                                      {"data" {"id" "ab" "source" "a" "target" "b"}}]]\n                                                (js/setTimeout \n                                                              #(init-cytoscape container test-elements) \n                                                              100))))\n               \n               :reagent-render\n               (fn []\n                        [:div\n                                 [:h3 "Test Graph"]\n                                 [:div {:id "test-cy" :style {:width "100%" :height "300px" :border "1px solid red"}}]])}))
1749003068670::cljs/quit
1749005093595:1
1749005096465::cljs/quit
